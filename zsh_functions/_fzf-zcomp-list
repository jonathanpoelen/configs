#!/bin/zsh

# based on https://github.com/Valodim/zsh-capture-completion

_zcomp_list_init()
{
  zmodload zsh/zpty || { echo 'error: missing module zsh/zpty' >&2; exit 1 }

  # spawn shell
  # zpty zcl zsh -if
  zpty zcl zsh -i

  # line buffer for pty output
  local line

  setopt localoptions rcquotes
  () {
    # extra space for disable history
    zpty -w zcl ' ' source $1
    repeat 4; do
      zpty -r zcl line
      [[ $line == ok* ]] && return
    done
    echo 'error initializing.' >&2
    return 2
  } =( <<< '
# no prompt!
PROMPT=
# long description
COLUMNS=420

# load completion system
#autoload compinit
#compinit -i -d ~/.zcompdump_capture

# never run a command
bindkey ''^M'' undefined
bindkey ''^J'' undefined
bindkey ''^I'' complete-word
bindkey ''^U'' kill-whole-line

# send a line with null-byte at the end before and after completions are output
null-line () {
  echo -E - $''\0''
}
comppost () {
  null-line
  compprefuncs=( null-line )
  comppostfuncs=( comppost )
}
compprefuncs=( null-line )
comppostfuncs=( comppost )

# never group stuff!
zstyle '':completion:*'' list-grouped false
# don''t insert tab when attempting completion on empty line
zstyle '':completion:*'' insert-tab false
# no list separator, this saves some stripping later on
zstyle '':completion:*'' list-separator ''''
# Use caching so that commands like apt and dpkg complete are useable
# zstyle '':completion::*'' use-cache 1
# zstyle '':completion::*'' cache-path ~/rawdisk/zsh_cache/

# we use zparseopts
zmodload zsh/zutil

# wrap compctl -K function
typeset -A fn
local fname newfname
for cmd in ${(f)"$(compctl)"} ; do
  set -- ${(Q)${(z)cmd}}
  zparseopts -E K:=fn
  if [[ -n $fn ]] ; then
    fname=$fn[-K]
    newfname=$fname-$$-zcl
    eval "$newfname() { $fname && { echo \${(j:\r\n:)reply}\"\\x0\" } }"
    compctl $@[2,-1] -K $newfname $@[1]
  fi
done

# override compctl -K function
compctl () {
  typeset -A fn
  zparseopts -E K:=fn
  if [[ -n $fn ]] ; then
    local newfname=$fname-$$-zcl
    eval "$newfname() { $fn[-K] && { echo \${(j:\r\n:)reply}\"\\x0\" } }"
    builtin compctl "$@[1,-2]" -K $newfname "$@[-1]"
  else
    builtin compctl "$@"
  fi
}

# override compadd (this our hook)
compadd () {

  # check if any of -O, -A or -D are given
  if [[ ${@[1,(i)(-|--)]} == *-(O|A|D)\ * ]]; then
    # if that is the case, just delegate and leave
    builtin compadd "$@"
    return $?
  fi

  # ok, this concerns us!
  # echo -E - got this: "$@"

  # be careful with namespacing here, we don''t want to mess with stuff that
  # should be passed to compadd!
  typeset -a __hits __dscr __tmp

  # do we have a description parameter?
  # note we don''t use zparseopts here because of combined option parameters
  # with arguments like -default- confuse it.
  if (( $@[(I)-d] )); then # kind of a hack, $+@[(r)-d] doesn''t work because of line noise overload
    # next param after -d
    __tmp=${@[$[${@[(i)-d]}+1]]}
    # description can be given as an array parameter name, or inline () array
    if [[ $__tmp == \(* ]]; then
      eval "__dscr=$__tmp"
    else
      __dscr=( "${(@P)__tmp}" )
    fi
  fi

  # capture completions by injecting -A parameter into the compadd call.
  # this takes care of matching for us.
  builtin compadd -A __hits -D __dscr "$@"

  # just drop
  [[ -n $__hits ]] || return

  # JESUS CHRIST IT TOOK ME FOREVER TO FIGURE OUT THIS OPTION WAS SET AND WAS MESSING WITH MY SHIT HERE
  setopt localoptions norcexpandparam extendedglob

  typeset -A apre hpre hsuf asuf isuf
  zparseopts -E Q=__tmp q=__tmp P:=apre p:=hpre S:=asuf s:=hsuf

  # append / to directories? we are only emulating -f in a half-assed way
  # here, but it''s better than nothing.
  #integer dirsuf=0
  # don''t be fooled by -default- >.>
  #if [[ -z $hsuf && "${${@//-default-/}% -# *}" == *-[[:alnum:]]#f* ]]; then
  #  dirsuf=1
  #fi

  # this is the point where we have all matches in $__hits and all
  # descriptions in $__dscr!
  # display all matches
  local pre=$IPREFIX$apre$hpre suf=$hsuf$asuf dsuf dscr blank=''                 ''
  typeset -i n
  for i in {1..$#__hits}; do
    # add a dir suffix?
    #(( dirsuf )) && [[ -d $__hits[$i] ]] && dsuf=/ || dsuf=
    # description to be displayed afterwards
    if (( $#__dscr >= $i )); then
      n=$#__hits[$i]
      if (( $#__dscr[$i] > $n )); then
         dscr=" —— ${${__dscr[$i]}##(#s)$__hits[$i] #}"
         (( $n < 17 )) && dsuf+=$blank[1,$((17 - $n))]
      fi
    else
      dscr=
    fi
    #echo -E - $pre$__hits[$i]$dsuf$suf$dscr
    echo -E - $pre$__hits[$i]$suf$dscr
  done

}

# signal success!
echo ok')

}

_zcomp_list_init || return 1

_zcomp_list()
{
  reply=()
  local line
  zpty -wn zcl $'\25'"$*"$'\t'
  zpty -r zcl line
  while zpty -r zcl line ; do
    [[ $line == $'\x00\r\n' ]] && break
    reply+=($line[1,-3])
  done
  reply=(${(u)reply})
}

_zcomp_list_reset()
{
  zpty -d zcl
  _zcomp_list_init
}

_fzf-zcomp-list()
{
  setopt localoptions extendedglob
  typeset -i s=$#LBUFFER
  typeset -i e=$s
  [[ $LBUFFER[-1] != ' ' ]] && s+=-${#${(z)LBUFFER}[-1]}
  [[ $RBUFFER[-1] != ' ' ]] && e+=${#${(z)RBUFFER}[0]}
  _zcomp_list $BUFFER[1,$e]
  [[ -z $reply ]] && { zle redisplay ; return }
  local r=${(j: :)${(f)"$(fzf<<<${(F)reply})"}/ ##—— *}
  [[ -z $r ]] && { zle redisplay ; return }
  [[ $r[-1] != '=' ]] && r+=' '
  (( ++s ))
  BUFFER[$s,$e]=$r
  CURSOR+=$#r
  zle redisplay
}

_fzf-zcomp-list
